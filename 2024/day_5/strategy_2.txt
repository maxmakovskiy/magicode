step 0 (case 4)
s = [97, 13]

step 1 (case 1)
s = [97, 13, 47]

step 2 (case 4)
s = [97, 13, 47, 75, 29]

step 3 (case 3)
s = [97, 29, 47, 75, 13]

step 4 (case 3) - nothing to do
s = [97, 29, 47, 75, 13]

step 5 (case 3) - nothing to do
s = [97, 29, 47, 75, 13]

step 6 (case 3)
s = [97, 29, 75, 47, 13]

step 7 (case 3) - nothing to do
s = [97, 29, 75, 47, 13]

step 8 (case 3)
s = [97, 47, 75, 29, 13]

step 9 (case 3) - nothing to do
s = [97, 47, 75, 29, 13]

// should be 97,75,47,29,13
// so, we are wrong

//////////////////////////
//////////////////////////

INIT
[0]  {left=97 right=13 }  Rule
[1]  {left=97 right=47 }  Rule
[2]  {left=75 right=29 }  Rule
[3]  {left=29 right=13 }  Rule
[4]  {left=97 right=29 }  Rule
[5]  {left=47 right=13 }  Rule
[6]  {left=75 right=47 }  Rule
[7]  {left=97 right=75 }  Rule
[8]  {left=47 right=29 }  Rule
[9]  {left=75 right=13 }  Rule


Let's take in consideration only pairs which have 97 (left)
[0]  {left=97 right=13 }  Rule
[1]  {left=97 right=47 }  Rule
[4]  {left=97 right=29 }  Rule
[7]  {left=97 right=75 }  Rule

The next one is 75 (left)
[2]  {left=75 right=29 }  Rule
[6]  {left=75 right=47 }  Rule
[9]  {left=75 right=13 }  Rule

After that it's order of 29 (left)
[3]  {left=29 right=13 }  Rule

the same for 47 (left)
[5]  {left=47 right=13 }  Rule
[8]  {left=47 right=29 }  Rule

Using knowledge about 97 we build
s = [97, 13 47, 29, 75] (append everyhing after 97)

Then find 75 in 's' and append every its knowledge 
Since we have alread got every number in 's'
we just need to make sure that those are going after 75
s = [97, 75, 13, 47, 29]

Same for 29 (swap)
s = [97, 75, 29, 47, 13]

And then for 47
For rule 5 it's true
For rule 6 we do the swap
s = [97, 75, 47, 29, 13]

